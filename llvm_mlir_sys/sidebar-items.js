window.SIDEBAR_ITEMS = {"constant":[["INT16_MAX",""],["INT16_MIN",""],["INT32_MAX",""],["INT32_MIN",""],["INT8_MAX",""],["INT8_MIN",""],["INTPTR_MAX",""],["INTPTR_MIN",""],["INT_FAST16_MAX",""],["INT_FAST16_MIN",""],["INT_FAST32_MAX",""],["INT_FAST32_MIN",""],["INT_FAST8_MAX",""],["INT_FAST8_MIN",""],["INT_LEAST16_MAX",""],["INT_LEAST16_MIN",""],["INT_LEAST32_MAX",""],["INT_LEAST32_MIN",""],["INT_LEAST8_MAX",""],["INT_LEAST8_MIN",""],["MlirDiagnosticSeverity_MlirDiagnosticError",""],["MlirDiagnosticSeverity_MlirDiagnosticNote",""],["MlirDiagnosticSeverity_MlirDiagnosticRemark",""],["MlirDiagnosticSeverity_MlirDiagnosticWarning",""],["MlirSparseTensorDimLevelType_MLIR_SPARSE_TENSOR_DIM_LEVEL_COMPRESSED",""],["MlirSparseTensorDimLevelType_MLIR_SPARSE_TENSOR_DIM_LEVEL_COMPRESSED_NO",""],["MlirSparseTensorDimLevelType_MLIR_SPARSE_TENSOR_DIM_LEVEL_COMPRESSED_NU",""],["MlirSparseTensorDimLevelType_MLIR_SPARSE_TENSOR_DIM_LEVEL_COMPRESSED_NU_NO",""],["MlirSparseTensorDimLevelType_MLIR_SPARSE_TENSOR_DIM_LEVEL_DENSE",""],["MlirSparseTensorDimLevelType_MLIR_SPARSE_TENSOR_DIM_LEVEL_SINGLETON",""],["MlirSparseTensorDimLevelType_MLIR_SPARSE_TENSOR_DIM_LEVEL_SINGLETON_NO",""],["MlirSparseTensorDimLevelType_MLIR_SPARSE_TENSOR_DIM_LEVEL_SINGLETON_NU",""],["MlirSparseTensorDimLevelType_MLIR_SPARSE_TENSOR_DIM_LEVEL_SINGLETON_NU_NO",""],["PTRDIFF_MAX",""],["PTRDIFF_MIN",""],["SIG_ATOMIC_MAX",""],["SIG_ATOMIC_MIN",""],["SIZE_MAX",""],["UINT16_MAX",""],["UINT32_MAX",""],["UINT8_MAX",""],["UINTPTR_MAX",""],["UINT_FAST16_MAX",""],["UINT_FAST32_MAX",""],["UINT_FAST8_MAX",""],["UINT_LEAST16_MAX",""],["UINT_LEAST32_MAX",""],["UINT_LEAST8_MAX",""],["WINT_MAX",""],["WINT_MIN",""],["_ATFILE_SOURCE",""],["_BITS_STDINT_INTN_H",""],["_BITS_STDINT_UINTN_H",""],["_BITS_TIME64_H",""],["_BITS_TYPESIZES_H",""],["_BITS_TYPES_H",""],["_BITS_WCHAR_H",""],["_DEFAULT_SOURCE",""],["_FEATURES_H",""],["_POSIX_C_SOURCE",""],["_POSIX_SOURCE",""],["_STDC_PREDEF_H",""],["_STDINT_H",""],["_SYS_CDEFS_H",""],["__FD_SETSIZE",""],["__GLIBC_MINOR__",""],["__GLIBC_USE_DEPRECATED_GETS",""],["__GLIBC_USE_DEPRECATED_SCANF",""],["__GLIBC_USE_IEC_60559_BFP_EXT",""],["__GLIBC_USE_IEC_60559_BFP_EXT_C2X",""],["__GLIBC_USE_IEC_60559_EXT",""],["__GLIBC_USE_IEC_60559_FUNCS_EXT",""],["__GLIBC_USE_IEC_60559_FUNCS_EXT_C2X",""],["__GLIBC_USE_IEC_60559_TYPES_EXT",""],["__GLIBC_USE_ISOC2X",""],["__GLIBC_USE_LIB_EXT2",""],["__GLIBC__",""],["__GNU_LIBRARY__",""],["__HAVE_GENERIC_SELECTION",""],["__INO_T_MATCHES_INO64_T",""],["__KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64",""],["__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI",""],["__OFF_T_MATCHES_OFF64_T",""],["__RLIM_T_MATCHES_RLIM64_T",""],["__STATFS_MATCHES_STATFS64",""],["__STDC_IEC_559_COMPLEX__",""],["__STDC_IEC_559__",""],["__STDC_IEC_60559_BFP__",""],["__STDC_IEC_60559_COMPLEX__",""],["__STDC_ISO_10646__",""],["__SYSCALL_WORDSIZE",""],["__TIMESIZE",""],["__USE_ATFILE",""],["__USE_FORTIFY_LEVEL",""],["__USE_ISOC11",""],["__USE_ISOC95",""],["__USE_ISOC99",""],["__USE_MISC",""],["__USE_POSIX",""],["__USE_POSIX199309",""],["__USE_POSIX199506",""],["__USE_POSIX2",""],["__USE_POSIX_IMPLICITLY",""],["__USE_XOPEN2K",""],["__USE_XOPEN2K8",""],["__WORDSIZE",""],["__WORDSIZE_TIME64_COMPAT32",""],["__bool_true_false_are_defined",""],["__glibc_c99_flexarr_available",""],["false_",""],["true_",""]],"fn":[["mlirAffineAddExprGet","Creates an affine add expression with ‘lhs’ and ‘rhs’."],["mlirAffineBinaryOpExprGetLHS","Returns the left hand side affine expression of the given affine binary operation expression."],["mlirAffineBinaryOpExprGetRHS","Returns the right hand side affine expression of the given affine binary operation expression."],["mlirAffineCeilDivExprGet","Creates an affine ceildiv expression with ‘lhs’ and ‘rhs’."],["mlirAffineConstantExprGet","Creates an affine constant expression with ‘constant’ in the context."],["mlirAffineConstantExprGetValue","Returns the value of the given affine constant expression."],["mlirAffineDimExprGet","Creates an affine dimension expression with ‘position’ in the context."],["mlirAffineDimExprGetPosition","Returns the position of the given affine dimension expression."],["mlirAffineExprCompose","Composes the given map with the given expression."],["mlirAffineExprDump","Prints the affine expression to the standard error stream."],["mlirAffineExprEqual","Returns `true` if the two affine expressions are equal."],["mlirAffineExprGetContext","Gets the context that owns the affine expression."],["mlirAffineExprGetLargestKnownDivisor","Returns the greatest known integral divisor of this affine expression. The result is always positive."],["mlirAffineExprIsAAdd","Checks whether the given affine expression is an add expression."],["mlirAffineExprIsABinary","Checks whether the given affine expression is binary."],["mlirAffineExprIsACeilDiv","Checks whether the given affine expression is an ceildiv expression."],["mlirAffineExprIsAConstant","Checks whether the given affine expression is a constant expression."],["mlirAffineExprIsADim","Checks whether the given affine expression is a dimension expression."],["mlirAffineExprIsAFloorDiv","Checks whether the given affine expression is an floordiv expression."],["mlirAffineExprIsAMod","Checks whether the given affine expression is an mod expression."],["mlirAffineExprIsAMul","Checks whether the given affine expression is an mul expression."],["mlirAffineExprIsASymbol","Checks whether the given affine expression is a symbol expression."],["mlirAffineExprIsFunctionOfDim","Checks whether the given affine expression involves AffineDimExpr ‘position’."],["mlirAffineExprIsMultipleOf","Checks whether the given affine expression is a multiple of ‘factor’."],["mlirAffineExprIsPureAffine","Checks whether the given affine expression is a pure affine expression, i.e. mul, floordiv, ceildic, and mod is only allowed w.r.t constants."],["mlirAffineExprIsSymbolicOrConstant","Checks whether the given affine expression is made out of only symbols and constants."],["mlirAffineExprPrint","Prints an affine expression by sending chunks of the string representation and forwarding `userData to `callback`. Note that the callback may be called several times with consecutive chunks of the string."],["mlirAffineFloorDivExprGet","Creates an affine floordiv expression with ‘lhs’ and ‘rhs’."],["mlirAffineMapAttrGet","Creates an affine map attribute wrapping the given map. The attribute belongs to the same context as the affine map."],["mlirAffineMapAttrGetValue","Returns the affine map wrapped in the given affine map attribute."],["mlirAffineMapCompressUnusedSymbols","Returns the simplified affine map resulting from dropping the symbols that do not appear in any of the individual maps in `affineMaps`. Asserts that all maps in `affineMaps` are normalized to the same number of dims and symbols. Takes a callback `populateResult` to fill the `res` container with value `m` at entry `idx`. This allows returning without worrying about ownership considerations."],["mlirAffineMapConstantGet","Creates a single constant result affine map in the context. The affine map is owned by the context."],["mlirAffineMapDump","Prints the affine map to the standard error stream."],["mlirAffineMapEmptyGet","Creates a zero result affine map with no dimensions or symbols in the context. The affine map is owned by the context."],["mlirAffineMapEqual","Checks if two affine maps are equal."],["mlirAffineMapGet","Creates an affine map with results defined by the given list of affine expressions. The map resulting map also has the requested number of input dimensions and symbols, regardless of them being used in the results."],["mlirAffineMapGetContext","Gets the context that the given affine map was created with"],["mlirAffineMapGetMajorSubMap","Returns the affine map consisting of the most major `numResults` results. Returns the null AffineMap if the `numResults` is equal to zero. Returns the `affineMap` if `numResults` is greater or equals to number of results of the given affine map."],["mlirAffineMapGetMinorSubMap","Returns the affine map consisting of the most minor `numResults` results. Returns the null AffineMap if the `numResults` is equal to zero. Returns the `affineMap` if `numResults` is greater or equals to number of results of the given affine map."],["mlirAffineMapGetNumDims","Returns the number of dimensions of the given affine map."],["mlirAffineMapGetNumInputs","Returns the number of inputs (dimensions + symbols) of the given affine map."],["mlirAffineMapGetNumResults","Returns the number of results of the given affine map."],["mlirAffineMapGetNumSymbols","Returns the number of symbols of the given affine map."],["mlirAffineMapGetResult","Returns the result at the given position."],["mlirAffineMapGetSingleConstantResult","Returns the constant result of the given affine map. The function asserts that the map has a single constant result."],["mlirAffineMapGetSubMap","Returns the affine map consisting of the `resultPos` subset."],["mlirAffineMapIsEmpty","Checks whether the given affine map is an empty affine map."],["mlirAffineMapIsIdentity","Checks whether the given affine map is an identity affine map. The function asserts that the number of dimensions is greater or equal to the number of results."],["mlirAffineMapIsMinorIdentity","Checks whether the given affine map is a minor identity affine map."],["mlirAffineMapIsPermutation","Checks whether the given affine map represents a symbol-less permutation map."],["mlirAffineMapIsProjectedPermutation","Checks whether the given affine map represents a subset of a symbol-less permutation map."],["mlirAffineMapIsSingleConstant","Checks whether the given affine map is a single result constant affine map."],["mlirAffineMapMinorIdentityGet","Creates an identity affine map on the most minor dimensions in the context. The affine map is owned by the context. The function asserts that the number of dimensions is greater or equal to the number of results."],["mlirAffineMapMultiDimIdentityGet","Creates an affine map with ‘numDims’ identity in the context. The affine map is owned by the context."],["mlirAffineMapPermutationGet","Creates an affine map with a permutation expression and its size in the context. The permutation expression is a non-empty vector of integers. The elements of the permutation vector must be continuous from 0 and cannot be repeated (i.e. `[1,2,0]` is a valid permutation. `[2,0]` or `[1,1,2]` is an invalid invalid permutation.) The affine map is owned by the context."],["mlirAffineMapPrint","Prints an affine map by sending chunks of the string representation and forwarding `userData to `callback`. Note that the callback may be called several times with consecutive chunks of the string."],["mlirAffineMapReplace","Apply AffineExpr::replace(`map`) to each of the results and return a new new AffineMap with the new results and the specified number of dims and symbols."],["mlirAffineMapZeroResultGet","Creates a zero result affine map of the given dimensions and symbols in the context. The affine map is owned by the context."],["mlirAffineModExprGet","Creates an affine mod expression with ‘lhs’ and ‘rhs’."],["mlirAffineMulExprGet","Creates an affine mul expression with ‘lhs’ and ‘rhs’."],["mlirAffineSymbolExprGet","Creates an affine symbol expression with ‘position’ in the context."],["mlirAffineSymbolExprGetPosition","Returns the position of the given affine symbol expression."],["mlirAnyQuantizedTypeGet","Creates an instance of AnyQuantizedType with the given parameters in the same context as `storageType` and returns it. The instance is owned by the context."],["mlirArrayAttrGet","Creates an array element containing the given list of elements in the given context."],["mlirArrayAttrGetElement","Returns pos-th element stored in the given array attribute."],["mlirArrayAttrGetNumElements","Returns the number of elements stored in the given array attribute."],["mlirAttributeDump","Prints the attribute to the standard error stream."],["mlirAttributeEqual","Checks if two attributes are equal."],["mlirAttributeGetContext","Gets the context that an attribute was created with."],["mlirAttributeGetNull","Returns an empty attribute."],["mlirAttributeGetType","Gets the type of this attribute."],["mlirAttributeGetTypeID","Gets the type id of the attribute."],["mlirAttributeIsAAffineMap","Checks whether the given attribute is an affine map attribute."],["mlirAttributeIsAArray","Checks whether the given attribute is an array attribute."],["mlirAttributeIsABool","Checks whether the given attribute is a bool attribute."],["mlirAttributeIsADenseBoolArray","Checks whether the given attribute is a dense array attribute."],["mlirAttributeIsADenseElements","Checks whether the given attribute is a dense elements attribute."],["mlirAttributeIsADenseF32Array",""],["mlirAttributeIsADenseF64Array",""],["mlirAttributeIsADenseFPElements",""],["mlirAttributeIsADenseI16Array",""],["mlirAttributeIsADenseI32Array",""],["mlirAttributeIsADenseI64Array",""],["mlirAttributeIsADenseI8Array",""],["mlirAttributeIsADenseIntElements",""],["mlirAttributeIsADictionary","Checks whether the given attribute is a dictionary attribute."],["mlirAttributeIsAElements","Checks whether the given attribute is an elements attribute."],["mlirAttributeIsAFlatSymbolRef","Checks whether the given attribute is a flat symbol reference attribute."],["mlirAttributeIsAFloat","Checks whether the given attribute is a floating point attribute."],["mlirAttributeIsAInteger","Checks whether the given attribute is an integer attribute."],["mlirAttributeIsAIntegerSet","Checks whether the given attribute is an integer set attribute."],["mlirAttributeIsAOpaque","Checks whether the given attribute is an opaque attribute."],["mlirAttributeIsASparseElements","Checks whether the given attribute is a sparse elements attribute."],["mlirAttributeIsASparseTensorEncodingAttr","Checks whether the given attribute is a sparse_tensor.encoding attribute."],["mlirAttributeIsAStridedLayout",""],["mlirAttributeIsAString","Checks whether the given attribute is a string attribute."],["mlirAttributeIsASymbolRef","Checks whether the given attribute is a symbol reference attribute."],["mlirAttributeIsAType","Checks whether the given attribute is a type attribute."],["mlirAttributeIsAUnit","Checks whether the given attribute is a unit attribute."],["mlirAttributeParseGet","Parses an attribute. The attribute is owned by the context."],["mlirAttributePrint","Prints an attribute by sending chunks of the string representation and forwarding `userData to `callback`. Note that the callback may be called several times with consecutive chunks of the string."],["mlirBF16TypeGet","Creates a bf16 type in the given context. The type is owned by the context."],["mlirBlockAddArgument","Appends an argument of the specified type to the block. Returns the newly added argument."],["mlirBlockAppendOwnedOperation","Takes an operation owned by the caller and appends it to the block."],["mlirBlockArgumentGetArgNumber","Returns the position of the value in the argument list of its block."],["mlirBlockArgumentGetOwner","Returns the block in which this value is defined as an argument. Asserts if the value is not a block argument."],["mlirBlockArgumentSetType","Sets the type of the block argument to the given type."],["mlirBlockCreate","Creates a new empty block with the given argument types and transfers ownership to the caller."],["mlirBlockDestroy","Takes a block owned by the caller and destroys it."],["mlirBlockDetach","Detach a block from the owning region and assume ownership."],["mlirBlockEqual","Checks whether two blocks handles point to the same block. This does not perform deep comparison."],["mlirBlockGetArgument","Returns `pos`-th argument of the block."],["mlirBlockGetFirstOperation","Returns the first operation in the block."],["mlirBlockGetNextInRegion","Returns the block immediately following the given block in its parent region."],["mlirBlockGetNumArguments","Returns the number of arguments of the block."],["mlirBlockGetParentOperation","Returns the closest surrounding operation that contains this block."],["mlirBlockGetParentRegion","Returns the region that contains this block."],["mlirBlockGetTerminator","Returns the terminator operation in the block or null if no terminator."],["mlirBlockInsertOwnedOperation","Takes an operation owned by the caller and inserts it as `pos` to the block. This is an expensive operation that scans the block linearly, prefer insertBefore/After instead."],["mlirBlockInsertOwnedOperationAfter","Takes an operation owned by the caller and inserts it after the (non-owned) reference operation in the given block. If the reference is null, prepends the operation. Otherwise, the reference must belong to the block."],["mlirBlockInsertOwnedOperationBefore","Takes an operation owned by the caller and inserts it before the (non-owned) reference operation in the given block. If the reference is null, appends the operation. Otherwise, the reference must belong to the block."],["mlirBlockPrint","Prints a block by sending chunks of the string representation and forwarding `userData to `callback`. Note that the callback may be called several times with consecutive chunks of the string."],["mlirBoolAttrGet","Creates a bool attribute in the given context with the given value."],["mlirBoolAttrGetValue","Returns the value stored in the given bool attribute."],["mlirCalibratedQuantizedTypeGet","Creates an instance of CalibratedQuantizedType with the given parameters in the same context as `expressedType` and returns it. The instance is owned by the context."],["mlirCalibratedQuantizedTypeGetMax","Returns the max value of the given calibrated quantized type."],["mlirCalibratedQuantizedTypeGetMin","Returns the min value of the given calibrated quantized type."],["mlirComplexTypeGet","Creates a complex type with the given element type in the same context as the element type. The type is owned by the context."],["mlirComplexTypeGetElementType","Returns the element type of the given complex type."],["mlirContextAppendDialectRegistry","Append the contents of the given dialect registry to the registry associated with the context."],["mlirContextAttachDiagnosticHandler","Attaches the diagnostic handler to the context. Handlers are invoked in the reverse order of attachment until one of them processes the diagnostic completely. When a handler is invoked it is passed the `userData` that was provided when it was attached. If non-NULL, `deleteUserData` is called once the system no longer needs to call the handler (for instance after the handler is detached or the context is destroyed). Returns an identifier that can be used to detach the handler."],["mlirContextCreate","Creates an MLIR context and transfers its ownership to the caller."],["mlirContextDestroy","Takes an MLIR context owned by the caller and destroys it."],["mlirContextDetachDiagnosticHandler","Detaches an attached diagnostic handler from the context given its identifier."],["mlirContextEnableMultithreading","Set threading mode (must be set to false to mlir-print-ir-after-all)."],["mlirContextEqual","Checks if two contexts are equal."],["mlirContextGetAllowUnregisteredDialects","Returns whether the context allows unregistered dialects."],["mlirContextGetNumLoadedDialects","Returns the number of dialects loaded by the context."],["mlirContextGetNumRegisteredDialects","Returns the number of dialects registered with the given context. A registered dialect will be loaded if needed by the parser."],["mlirContextGetOrLoadDialect","Gets the dialect instance owned by the given context using the dialect namespace to identify it, loads (i.e., constructs the instance of) the dialect if necessary. If the dialect is not registered with the context, returns null. Use mlirContextLoadDialect to load an unregistered dialect."],["mlirContextIsRegisteredOperation","Returns whether the given fully-qualified operation (i.e. ‘dialect.operation’) is registered with the context. This will return true if the dialect is loaded and the operation is registered within the dialect."],["mlirContextLoadAllAvailableDialects","Eagerly loads all available dialects registered with a context, making them available for use for IR construction."],["mlirContextSetAllowUnregisteredDialects","Sets whether unregistered dialects are allowed in this context."],["mlirCreateAsyncAsyncFuncToAsyncRuntime",""],["mlirCreateAsyncAsyncParallelFor",""],["mlirCreateAsyncAsyncRuntimePolicyBasedRefCounting",""],["mlirCreateAsyncAsyncRuntimeRefCounting",""],["mlirCreateAsyncAsyncRuntimeRefCountingOpt",""],["mlirCreateAsyncAsyncToAsyncRuntime",""],["mlirCreateConversionArithToLLVMConversionPass",""],["mlirCreateConversionConvertAMDGPUToROCDL",""],["mlirCreateConversionConvertAffineForToGPU",""],["mlirCreateConversionConvertAffineToStandard",""],["mlirCreateConversionConvertArithToSPIRV",""],["mlirCreateConversionConvertArmNeon2dToIntr",""],["mlirCreateConversionConvertAsyncToLLVM",""],["mlirCreateConversionConvertBufferizationToMemRef",""],["mlirCreateConversionConvertComplexToLLVM",""],["mlirCreateConversionConvertComplexToLibm",""],["mlirCreateConversionConvertComplexToStandard",""],["mlirCreateConversionConvertControlFlowToLLVM",""],["mlirCreateConversionConvertControlFlowToSPIRV",""],["mlirCreateConversionConvertFuncToLLVM",""],["mlirCreateConversionConvertFuncToSPIRV",""],["mlirCreateConversionConvertGPUToSPIRV",""],["mlirCreateConversionConvertGpuLaunchFuncToVulkanLaunchFunc",""],["mlirCreateConversionConvertGpuOpsToNVVMOps",""],["mlirCreateConversionConvertGpuOpsToROCDLOps",""],["mlirCreateConversionConvertIndexToLLVMPass",""],["mlirCreateConversionConvertLinalgToLLVM",""],["mlirCreateConversionConvertLinalgToStandard",""],["mlirCreateConversionConvertMathToFuncs",""],["mlirCreateConversionConvertMathToLLVM",""],["mlirCreateConversionConvertMathToLibm",""],["mlirCreateConversionConvertMathToSPIRV",""],["mlirCreateConversionConvertMemRefToSPIRV",""],["mlirCreateConversionConvertNVGPUToNVVM",""],["mlirCreateConversionConvertOpenACCToLLVM",""],["mlirCreateConversionConvertOpenACCToSCF",""],["mlirCreateConversionConvertOpenMPToLLVM",""],["mlirCreateConversionConvertPDLToPDLInterp",""],["mlirCreateConversionConvertParallelLoopToGpu",""],["mlirCreateConversionConvertSCFToOpenMP",""],["mlirCreateConversionConvertSPIRVToLLVM",""],["mlirCreateConversionConvertShapeConstraints",""],["mlirCreateConversionConvertShapeToStandard",""],["mlirCreateConversionConvertTensorToLinalg",""],["mlirCreateConversionConvertTensorToSPIRV",""],["mlirCreateConversionConvertVectorToGPU",""],["mlirCreateConversionConvertVectorToLLVM",""],["mlirCreateConversionConvertVectorToSCF",""],["mlirCreateConversionConvertVectorToSPIRV",""],["mlirCreateConversionConvertVulkanLaunchFuncToVulkanCalls",""],["mlirCreateConversionGpuToLLVMConversionPass",""],["mlirCreateConversionLowerHostCodeToLLVM",""],["mlirCreateConversionMapMemRefStorageClass",""],["mlirCreateConversionMemRefToLLVMConversionPass",""],["mlirCreateConversionReconcileUnrealizedCasts",""],["mlirCreateConversionSCFToControlFlow",""],["mlirCreateConversionSCFToSPIRV",""],["mlirCreateConversionTosaToArith",""],["mlirCreateConversionTosaToLinalg",""],["mlirCreateConversionTosaToLinalgNamed",""],["mlirCreateConversionTosaToSCF",""],["mlirCreateConversionTosaToTensor",""],["mlirCreateExternalPass","Creates an external `MlirPass` that calls the supplied `callbacks` using the supplied `userData`. If `opName` is empty, the pass is a generic operation pass. Otherwise it is an operation pass specific to the specified pass name."],["mlirCreateGPUGPULowerMemorySpaceAttributesPass",""],["mlirCreateGPUGpuAsyncRegionPass",""],["mlirCreateGPUGpuKernelOutlining",""],["mlirCreateGPUGpuLaunchSinkIndexComputations",""],["mlirCreateGPUGpuMapParallelLoopsPass",""],["mlirCreateLinalgConvertElementwiseToLinalg",""],["mlirCreateLinalgLinalgBufferize",""],["mlirCreateLinalgLinalgDetensorize",""],["mlirCreateLinalgLinalgElementwiseOpFusion",""],["mlirCreateLinalgLinalgFoldUnitExtentDims",""],["mlirCreateLinalgLinalgGeneralization",""],["mlirCreateLinalgLinalgInlineScalarOperands",""],["mlirCreateLinalgLinalgLowerToAffineLoops",""],["mlirCreateLinalgLinalgLowerToLoops",""],["mlirCreateLinalgLinalgLowerToParallelLoops",""],["mlirCreateLinalgLinalgNamedOpConversion",""],["mlirCreateSparseTensorPostSparsificationRewrite",""],["mlirCreateSparseTensorPreSparsificationRewrite",""],["mlirCreateSparseTensorSparseBufferRewrite",""],["mlirCreateSparseTensorSparseTensorCodegen",""],["mlirCreateSparseTensorSparseTensorConversionPass",""],["mlirCreateSparseTensorSparseVectorization",""],["mlirCreateSparseTensorSparsificationPass",""],["mlirCreateSparseTensorStorageSpecifierToLLVM",""],["mlirCreateTransformsCSE",""],["mlirCreateTransformsCanonicalizer",""],["mlirCreateTransformsControlFlowSink",""],["mlirCreateTransformsGenerateRuntimeVerification",""],["mlirCreateTransformsInliner",""],["mlirCreateTransformsLocationSnapshot",""],["mlirCreateTransformsLoopInvariantCodeMotion",""],["mlirCreateTransformsPrintOpStats",""],["mlirCreateTransformsSCCP",""],["mlirCreateTransformsStripDebugInfo",""],["mlirCreateTransformsSymbolDCE",""],["mlirCreateTransformsSymbolPrivatize",""],["mlirCreateTransformsTopologicalSort",""],["mlirCreateTransformsViewOpGraph",""],["mlirDenseArrayGetNumElements","Get the size of a dense array."],["mlirDenseBoolArrayGet","Create a dense array attribute with the given elements."],["mlirDenseBoolArrayGetElement","Get an element of a dense array."],["mlirDenseBoolResourceElementsAttrGetValue","Returns the pos-th value (flat contiguous indexing) of a specific type contained by the given dense resource elements attribute."],["mlirDenseDoubleResourceElementsAttrGetValue",""],["mlirDenseElementsAttrBFloat16Get",""],["mlirDenseElementsAttrBoolGet","Creates a dense elements attribute with the given shaped type from elements of a specific type. Expects the element type of the shaped type to match the data element type."],["mlirDenseElementsAttrBoolSplatGet",""],["mlirDenseElementsAttrDoubleGet",""],["mlirDenseElementsAttrDoubleSplatGet",""],["mlirDenseElementsAttrFloat16Get",""],["mlirDenseElementsAttrFloatGet",""],["mlirDenseElementsAttrFloatSplatGet",""],["mlirDenseElementsAttrGet","Creates a dense elements attribute with the given Shaped type and elements in the same context as the type."],["mlirDenseElementsAttrGetBoolSplatValue",""],["mlirDenseElementsAttrGetBoolValue","Returns the pos-th value (flat contiguous indexing) of a specific type contained by the given dense elements attribute."],["mlirDenseElementsAttrGetDoubleSplatValue",""],["mlirDenseElementsAttrGetDoubleValue",""],["mlirDenseElementsAttrGetFloatSplatValue",""],["mlirDenseElementsAttrGetFloatValue",""],["mlirDenseElementsAttrGetInt16Value",""],["mlirDenseElementsAttrGetInt32SplatValue",""],["mlirDenseElementsAttrGetInt32Value",""],["mlirDenseElementsAttrGetInt64SplatValue",""],["mlirDenseElementsAttrGetInt64Value",""],["mlirDenseElementsAttrGetInt8SplatValue",""],["mlirDenseElementsAttrGetInt8Value",""],["mlirDenseElementsAttrGetRawData","Returns the raw data of the given dense elements attribute."],["mlirDenseElementsAttrGetSplatValue","Returns the single replicated value (splat) of a specific type contained by the given dense elements attribute."],["mlirDenseElementsAttrGetStringSplatValue",""],["mlirDenseElementsAttrGetStringValue",""],["mlirDenseElementsAttrGetUInt16Value",""],["mlirDenseElementsAttrGetUInt32SplatValue",""],["mlirDenseElementsAttrGetUInt32Value",""],["mlirDenseElementsAttrGetUInt64SplatValue",""],["mlirDenseElementsAttrGetUInt64Value",""],["mlirDenseElementsAttrGetUInt8SplatValue",""],["mlirDenseElementsAttrGetUInt8Value",""],["mlirDenseElementsAttrInt16Get",""],["mlirDenseElementsAttrInt32Get",""],["mlirDenseElementsAttrInt32SplatGet",""],["mlirDenseElementsAttrInt64Get",""],["mlirDenseElementsAttrInt64SplatGet",""],["mlirDenseElementsAttrInt8Get",""],["mlirDenseElementsAttrInt8SplatGet",""],["mlirDenseElementsAttrIsSplat","Checks whether the given dense elements attribute contains a single replicated value (splat)."],["mlirDenseElementsAttrRawBufferGet","Creates a dense elements attribute with the given Shaped type and elements populated from a packed, row-major opaque buffer of contents."],["mlirDenseElementsAttrReshapeGet","Creates a dense elements attribute that has the same data as the given dense elements attribute and a different shaped type. The new type must have the same total number of elements."],["mlirDenseElementsAttrSplatGet","Creates a dense elements attribute with the given Shaped type containing a single replicated element (splat)."],["mlirDenseElementsAttrStringGet","Creates a dense elements attribute with the given shaped type from string elements."],["mlirDenseElementsAttrUInt16Get",""],["mlirDenseElementsAttrUInt32Get",""],["mlirDenseElementsAttrUInt32SplatGet",""],["mlirDenseElementsAttrUInt64Get",""],["mlirDenseElementsAttrUInt64SplatGet",""],["mlirDenseElementsAttrUInt8Get",""],["mlirDenseElementsAttrUInt8SplatGet",""],["mlirDenseF32ArrayGet",""],["mlirDenseF32ArrayGetElement",""],["mlirDenseF64ArrayGet",""],["mlirDenseF64ArrayGetElement",""],["mlirDenseFloatResourceElementsAttrGetValue",""],["mlirDenseI16ArrayGet",""],["mlirDenseI16ArrayGetElement",""],["mlirDenseI32ArrayGet",""],["mlirDenseI32ArrayGetElement",""],["mlirDenseI64ArrayGet",""],["mlirDenseI64ArrayGetElement",""],["mlirDenseI8ArrayGet",""],["mlirDenseI8ArrayGetElement",""],["mlirDenseInt16ResourceElementsAttrGetValue",""],["mlirDenseInt32ResourceElementsAttrGetValue",""],["mlirDenseInt64ResourceElementsAttrGetValue",""],["mlirDenseInt8ResourceElementsAttrGetValue",""],["mlirDenseUInt16ResourceElementsAttrGetValue",""],["mlirDenseUInt32ResourceElementsAttrGetValue",""],["mlirDenseUInt64ResourceElementsAttrGetValue",""],["mlirDenseUInt8ResourceElementsAttrGetValue",""],["mlirDiagnosticGetLocation","Returns the location at which the diagnostic is reported."],["mlirDiagnosticGetNote","Returns `pos`-th note attached to the diagnostic. Expects `pos` to be a valid zero-based index into the list of notes."],["mlirDiagnosticGetNumNotes","Returns the number of notes attached to the diagnostic."],["mlirDiagnosticGetSeverity","Returns the severity of the diagnostic."],["mlirDiagnosticPrint","Prints a diagnostic using the provided callback."],["mlirDialectEqual","Checks if two dialects that belong to the same context are equal. Dialects from different contexts will not compare equal."],["mlirDialectGetContext","Returns the context that owns the dialect."],["mlirDialectGetNamespace","Returns the namespace of the given dialect."],["mlirDialectHandleGetNamespace","Returns the namespace associated with the provided dialect handle."],["mlirDialectHandleInsertDialect","Inserts the dialect associated with the provided dialect handle into the provided dialect registry"],["mlirDialectHandleLoadDialect","Loads the dialect associated with the provided dialect handle."],["mlirDialectHandleRegisterDialect","Registers the dialect associated with the provided dialect handle."],["mlirDialectRegistryCreate","Creates a dialect registry and transfers its ownership to the caller."],["mlirDialectRegistryDestroy","Takes a dialect registry owned by the caller and destroys it."],["mlirDictionaryAttrGet","Creates a dictionary attribute containing the given list of elements in the provided context."],["mlirDictionaryAttrGetElement","Returns pos-th element of the given dictionary attribute."],["mlirDictionaryAttrGetElementByName","Returns the dictionary attribute element with the given name or NULL if the given name does not exist in the dictionary."],["mlirDictionaryAttrGetNumElements","Returns the number of attributes contained in a dictionary attribute."],["mlirElementsAttrGetNumElements","Gets the total number of elements in the given elements attribute. In order to iterate over the attribute, obtain its type, which must be a statically shaped type and use its sizes to build a multi-dimensional index."],["mlirElementsAttrGetValue","Returns the element at the given rank-dimensional index."],["mlirElementsAttrIsValidIndex","Checks whether the given rank-dimensional index is valid in the given elements attribute."],["mlirEmitError","Emits an error at the given location through the diagnostics engine. Used for testing purposes."],["mlirEnableGlobalDebug","Sets the global debugging flag."],["mlirExecutionEngineCreate","Creates an ExecutionEngine for the provided ModuleOp. The ModuleOp is expected to be “translatable” to LLVM IR (only contains operations in dialects that implement the `LLVMTranslationDialectInterface`). The module ownership stays with the client and can be destroyed as soon as the call returns. `optLevel` is the optimization level to be used for transformation and code generation. LLVM passes at `optLevel` are run before code generation. The number and array of paths corresponding to shared libraries that will be loaded are specified via `numPaths` and `sharedLibPaths` respectively. TODO: figure out other options."],["mlirExecutionEngineDestroy","Destroy an ExecutionEngine instance."],["mlirExecutionEngineDumpToObjectFile","Dump as an object in `fileName`."],["mlirExecutionEngineInvokePacked","Invoke a native function in the execution engine by name with the arguments and result of the invoked function passed as an array of pointers. The function must have been tagged with the `llvm.emit_c_interface` attribute. Returns a failure if the execution fails for any reason (the function name can’t be resolved for instance)."],["mlirExecutionEngineLookup","Lookup a native function in the execution engine by name, returns nullptr if the name can’t be looked-up."],["mlirExecutionEngineLookupPacked","Lookup the wrapper of the native function in the execution engine with the given name, returns nullptr if the function can’t be looked-up."],["mlirExecutionEngineRegisterSymbol","Register a symbol with the jit: this symbol will be accessible to the jitted code."],["mlirExternalPassSignalFailure","This signals that the pass has failed. This is only valid to call during the `run` callback of `MlirExternalPassCallbacks`. See Pass::signalPassFailure()."],["mlirF16TypeGet","Creates an f16 type in the given context. The type is owned by the context."],["mlirF32TypeGet","Creates an f32 type in the given context. The type is owned by the context."],["mlirF64TypeGet","Creates a f64 type in the given context. The type is owned by the context."],["mlirFlatSymbolRefAttrGet","Creates a flat symbol reference attribute in the given context referencing a symbol identified by the given string."],["mlirFlatSymbolRefAttrGetValue","Returns the referenced symbol as a string reference. The data remains live as long as the context in which the attribute lives."],["mlirFloat8E4M3FNTypeGet","Creates an f8E4M3FN type in the given context. The type is owned by the context."],["mlirFloat8E5M2TypeGet","Creates an f8E5M2 type in the given context. The type is owned by the context."],["mlirFloatAttrDoubleGet","Creates a floating point attribute in the given context with the given double value and double-precision FP semantics."],["mlirFloatAttrDoubleGetChecked","Same as “mlirFloatAttrDoubleGet”, but if the type is not valid for a construction of a FloatAttr, returns a null MlirAttribute."],["mlirFloatAttrGetValueDouble","Returns the value stored in the given floating point attribute, interpreting the value as double."],["mlirFunctionTypeGet","Creates a function type, mapping a list of input types to result types."],["mlirFunctionTypeGetInput","Returns the pos-th input type."],["mlirFunctionTypeGetNumInputs","Returns the number of input types."],["mlirFunctionTypeGetNumResults","Returns the number of result types."],["mlirFunctionTypeGetResult","Returns the pos-th result type."],["mlirGetDialectHandle__async__",""],["mlirGetDialectHandle__cf__",""],["mlirGetDialectHandle__func__",""],["mlirGetDialectHandle__gpu__",""],["mlirGetDialectHandle__linalg__",""],["mlirGetDialectHandle__llvm__",""],["mlirGetDialectHandle__ml_program__",""],["mlirGetDialectHandle__pdl__",""],["mlirGetDialectHandle__quant__",""],["mlirGetDialectHandle__scf__",""],["mlirGetDialectHandle__shape__",""],["mlirGetDialectHandle__sparse_tensor__",""],["mlirGetDialectHandle__tensor__",""],["mlirGetDialectHandle__transform__",""],["mlirIdentifierEqual","Checks whether two identifiers are the same."],["mlirIdentifierGet","Gets an identifier with the given string value."],["mlirIdentifierGetContext","Returns the context associated with this identifier"],["mlirIdentifierStr","Gets the string value of the identifier."],["mlirIndexTypeGet","Creates an index type in the given context. The type is owned by the context."],["mlirInferTypeOpInterfaceInferReturnTypes","Infers the return types of the operation identified by its canonical given the arguments that will be supplied to its generic builder. Calls `callback` with the types of inferred arguments, potentially several times, on success. Returns failure otherwise."],["mlirInferTypeOpInterfaceTypeID","Returns the interface TypeID of the InferTypeOpInterface."],["mlirIntegerAttrGet","Creates an integer attribute of the given type with the given integer value."],["mlirIntegerAttrGetValueInt","Returns the value stored in the given integer attribute, assuming the value is of signless type and fits into a signed 64-bit integer."],["mlirIntegerAttrGetValueSInt","Returns the value stored in the given integer attribute, assuming the value is of signed type and fits into a signed 64-bit integer."],["mlirIntegerAttrGetValueUInt","Returns the value stored in the given integer attribute, assuming the value is of unsigned type and fits into an unsigned 64-bit integer."],["mlirIntegerSetDump","Prints an integer set to the standard error stream."],["mlirIntegerSetEmptyGet","Gets or creates a new canonically empty integer set with the give number of dimensions and symbols in the given context."],["mlirIntegerSetEqual","Checks if two integer set objects are equal. This is a “shallow” comparison of two objects. Only the sets with some small number of constraints are uniqued and compare equal here. Set objects that represent the same integer set with different constraints may be considered non-equal by this check. Set difference followed by an (expensive) emptiness check should be used to check equivalence of the underlying integer sets."],["mlirIntegerSetGet","Gets or creates a new integer set in the given context. The set is defined by a list of affine constraints, with the given number of input dimensions and symbols, which are treated as either equalities (eqFlags is 1) or inequalities (eqFlags is 0). Both `constraints` and `eqFlags` are expected to point to at least `numConstraint` consecutive values."],["mlirIntegerSetGetConstraint","Returns `pos`-th constraint of the set."],["mlirIntegerSetGetContext","Gets the context in which the given integer set lives."],["mlirIntegerSetGetNumConstraints","Returns the number of constraints (equalities + inequalities) in the given set."],["mlirIntegerSetGetNumDims","Returns the number of dimensions in the given set."],["mlirIntegerSetGetNumEqualities","Returns the number of equalities in the given set."],["mlirIntegerSetGetNumInequalities","Returns the number of inequalities in the given set."],["mlirIntegerSetGetNumInputs","Returns the number of inputs (dimensions + symbols) in the given set."],["mlirIntegerSetGetNumSymbols","Returns the number of symbols in the given set."],["mlirIntegerSetIsCanonicalEmpty","Checks whether the given set is a canonical empty set, e.g., the set returned by mlirIntegerSetEmptyGet."],["mlirIntegerSetIsConstraintEq","Returns `true` of the `pos`-th constraint of the set is an equality constraint, `false` otherwise."],["mlirIntegerSetPrint","Prints an integer set by sending chunks of the string representation and forwarding `userData to `callback`. Note that the callback may be called several times with consecutive chunks of the string."],["mlirIntegerSetReplaceGet","Gets or creates a new integer set in which the values and dimensions of the given set are replaced with the given affine expressions. `dimReplacements` and `symbolReplacements` are expected to point to at least as many consecutive expressions as the given set has dimensions and symbols, respectively. The new set will have `numResultDims` and `numResultSymbols` dimensions and symbols, respectively."],["mlirIntegerTypeGet","Creates a signless integer type of the given bitwidth in the context. The type is owned by the context."],["mlirIntegerTypeGetWidth","Returns the bitwidth of an integer type."],["mlirIntegerTypeIsSigned","Checks whether the given integer type is signed."],["mlirIntegerTypeIsSignless","Checks whether the given integer type is signless."],["mlirIntegerTypeIsUnsigned","Checks whether the given integer type is unsigned."],["mlirIntegerTypeSignedGet","Creates a signed integer type of the given bitwidth in the context. The type is owned by the context."],["mlirIntegerTypeUnsignedGet","Creates an unsigned integer type of the given bitwidth in the context. The type is owned by the context."],["mlirIsGlobalDebugEnabled","Retuns `true` if the global debugging flag is set, false otherwise."],["mlirLLVMArrayTypeGet","Creates an llvm.array type."],["mlirLLVMFunctionTypeGet","Creates an llvm.func type."],["mlirLLVMPointerTypeGet","Creates an llvm.ptr type."],["mlirLLVMStructTypeLiteralGet","Creates an LLVM literal (unnamed) struct type."],["mlirLLVMVoidTypeGet","Creates an llmv.void type."],["mlirLinalgFillBuiltinNamedOpRegion","Apply the special region builder for the builtin named Linalg op. Assert that `mlirOp` is a builtin named Linalg op."],["mlirLocationCallSiteGet","Creates a call site location with a callee and a caller."],["mlirLocationEqual","Checks if two locations are equal."],["mlirLocationFileLineColGet","Creates an File/Line/Column location owned by the given context."],["mlirLocationFusedGet","Creates a fused location with an array of locations and metadata."],["mlirLocationGetContext","Gets the context that a location was created with."],["mlirLocationNameGet","Creates a name location owned by the given context. Providing null location for childLoc is allowed and if childLoc is null location, then the behavior is the same as having unknown child location."],["mlirLocationPrint","Prints a location by sending chunks of the string representation and forwarding `userData to `callback`. Note that the callback may be called several times with consecutive chunks of the string."],["mlirLocationUnknownGet","Creates a location with unknown position owned by the given context."],["mlirMemRefTypeContiguousGet","Creates a MemRef type with the given rank, shape, memory space and element type in the same context as the element type. The type has no affine maps, i.e. represents a default row-major contiguous memref. The type is owned by the context."],["mlirMemRefTypeContiguousGetChecked","Same as “mlirMemRefTypeContiguousGet” but returns a nullptr wrapping MlirType on illegal arguments, emitting appropriate diagnostics."],["mlirMemRefTypeGet","Creates a MemRef type with the given rank and shape, a potentially empty list of affine layout maps, the given memory space and element type, in the same context as element type. The type is owned by the context."],["mlirMemRefTypeGetAffineMap","Returns the affine map of the given MemRef type."],["mlirMemRefTypeGetChecked","Same as “mlirMemRefTypeGet” but returns a nullptr-wrapping MlirType o illegal arguments, emitting appropriate diagnostics."],["mlirMemRefTypeGetLayout","Returns the layout of the given MemRef type."],["mlirMemRefTypeGetMemorySpace","Returns the memory space of the given MemRef type."],["mlirModuleCreateEmpty","Creates a new, empty module and transfers ownership to the caller."],["mlirModuleCreateParse","Parses a module from the string and transfers ownership to the caller."],["mlirModuleDestroy","Takes a module owned by the caller and deletes it."],["mlirModuleFromOperation","Views the generic operation as a module. The returned module is null when the input operation was not a ModuleOp."],["mlirModuleGetBody","Gets the body of the module, i.e. the only block it contains."],["mlirModuleGetContext","Gets the context that a module was created with."],["mlirModuleGetOperation","Views the module as a generic operation."],["mlirNamedAttributeGet","Associates an attribute with the name. Takes ownership of neither."],["mlirNoneTypeGet","Creates a None type in the given context. The type is owned by the context."],["mlirOpOperandGetNextUse","Returns an op operand representing the next use of the value, or a null op operand if there is no next use."],["mlirOpOperandGetOperandNumber","Returns the operand number of an op operand."],["mlirOpOperandGetOwner","Returns the owner operation of an op operand."],["mlirOpOperandIsNull","Returns whether the op operand is null."],["mlirOpPassManagerAddOwnedPass","Add a pass and transfer ownership to the provided mlirOpPassManager. If the pass is not a generic operation pass or matching the type of the provided PassManager, a new OpPassManager is implicitly nested under the provided PassManager."],["mlirOpPassManagerAddPipeline","Parse a sequence of textual MLIR pass pipeline elements and add them to the provided OpPassManager. If parsing fails an error message is reported using the provided callback."],["mlirOpPassManagerGetNestedUnder","Nest an OpPassManager under the provided OpPassManager, the nested passmanager will only run on operations matching the provided name. The returned OpPassManager will be destroyed when the parent is destroyed."],["mlirOpPrintingFlagsCreate","Creates new printing flags with defaults, intended for customization. Must be freed with a call to mlirOpPrintingFlagsDestroy()."],["mlirOpPrintingFlagsDestroy","Destroys printing flags created with mlirOpPrintingFlagsCreate."],["mlirOpPrintingFlagsElideLargeElementsAttrs","Enables the elision of large elements attributes by printing a lexically valid but otherwise meaningless form instead of the element data. The `largeElementLimit` is used to configure what is considered to be a “large” ElementsAttr by providing an upper limit to the number of elements."],["mlirOpPrintingFlagsEnableDebugInfo","Enable or disable printing of debug information (based on `enable`). If ‘prettyForm’ is set to true, debug information is printed in a more readable ‘pretty’ form. Note: The IR generated with ‘prettyForm’ is not parsable."],["mlirOpPrintingFlagsPrintGenericOpForm","Always print operations in the generic form."],["mlirOpPrintingFlagsUseLocalScope","Use local scope when printing the operation. This allows for using the printer in a more localized and thread-safe setting, but may not necessarily be identical to what the IR will look like when dumping the full module."],["mlirOpResultGetOwner","Returns an operation that produced this value as its result. Asserts if the value is not an op result."],["mlirOpResultGetResultNumber","Returns the position of the value in the list of results of the operation that produced it."],["mlirOpaqueAttrGet","Creates an opaque attribute in the given context associated with the dialect identified by its namespace. The attribute contains opaque byte data of the specified length (data need not be null-terminated)."],["mlirOpaqueAttrGetData","Returns the raw data as a string reference. The data remains live as long as the context in which the attribute lives."],["mlirOpaqueAttrGetDialectNamespace","Returns the namespace of the dialect with which the given opaque attribute is associated. The namespace string is owned by the context."],["mlirOpaqueTypeGet","Creates an opaque type in the given context associated with the dialect identified by its namespace. The type contains opaque byte data of the specified length (data need not be null-terminated)."],["mlirOpaqueTypeGetData","Returns the raw data as a string reference. The data remains live as long as the context in which the type lives."],["mlirOpaqueTypeGetDialectNamespace","Returns the namespace of the dialect with which the given opaque type is associated. The namespace string is owned by the context."],["mlirOperationClone","Creates a deep copy of an operation. The operation is not inserted and ownership is transferred to the caller."],["mlirOperationCreate","Creates an operation and transfers ownership to the caller. Note that caller owned child objects are transferred in this call and must not be further used. Particularly, this applies to any regions added to the state (the implementation may invalidate any such pointers)."],["mlirOperationDestroy","Takes an operation owned by the caller and destroys it."],["mlirOperationDump","Prints an operation to stderr."],["mlirOperationEqual","Checks whether two operation handles point to the same operation. This does not perform deep comparison."],["mlirOperationGetAttribute","Return `pos`-th attribute of the operation."],["mlirOperationGetAttributeByName","Returns an attribute attached to the operation given its name."],["mlirOperationGetBlock","Gets the block that owns this operation, returning null if the operation is not owned."],["mlirOperationGetContext","Gets the context this operation is associated with"],["mlirOperationGetFirstRegion","Returns first region attached to the operation."],["mlirOperationGetLocation","Gets the location of the operation."],["mlirOperationGetName","Gets the name of the operation as an identifier."],["mlirOperationGetNextInBlock","Returns an operation immediately following the given operation it its enclosing block."],["mlirOperationGetNumAttributes","Returns the number of attributes attached to the operation."],["mlirOperationGetNumOperands","Returns the number of operands of the operation."],["mlirOperationGetNumRegions","Returns the number of regions attached to the given operation."],["mlirOperationGetNumResults","Returns the number of results of the operation."],["mlirOperationGetNumSuccessors","Returns the number of successor blocks of the operation."],["mlirOperationGetOperand","Returns `pos`-th operand of the operation."],["mlirOperationGetParentOperation","Gets the operation that owns this operation, returning null if the operation is not owned."],["mlirOperationGetRegion","Returns `pos`-th region attached to the operation."],["mlirOperationGetResult","Returns `pos`-th result of the operation."],["mlirOperationGetSuccessor","Returns `pos`-th successor of the operation."],["mlirOperationGetTypeID","Gets the type id of the operation. Returns null if the operation does not have a registered operation description."],["mlirOperationImplementsInterface","Returns `true` if the given operation implements an interface identified by its TypeID."],["mlirOperationImplementsInterfaceStatic","Returns `true` if the operation identified by its canonical string name implements the interface identified by its TypeID in the given context. Note that interfaces may be attached to operations in some contexts and not others."],["mlirOperationMoveAfter","Moves the given operation immediately after the other operation in its parent block. The given operation may be owned by the caller or by its current block. The other operation must belong to a block. In any case, the ownership is transferred to the block of the other operation."],["mlirOperationMoveBefore","Moves the given operation immediately before the other operation in its parent block. The given operation may be owner by the caller or by its current block. The other operation must belong to a block. In any case, the ownership is transferred to the block of the other operation."],["mlirOperationPrint","Prints an operation by sending chunks of the string representation and forwarding `userData to `callback`. Note that the callback may be called several times with consecutive chunks of the string."],["mlirOperationPrintWithFlags","Same as mlirOperationPrint but accepts flags controlling the printing behavior."],["mlirOperationRemoveAttributeByName","Removes an attribute by name. Returns false if the attribute was not found and true if removed."],["mlirOperationRemoveFromParent","Removes the given operation from its parent block. The operation is not destroyed. The ownership of the operation is transferred to the caller."],["mlirOperationSetAttributeByName","Sets an attribute by name, replacing the existing if it exists or adding a new one otherwise."],["mlirOperationSetOperand","Sets the `pos`-th operand of the operation."],["mlirOperationStateAddAttributes",""],["mlirOperationStateAddOperands",""],["mlirOperationStateAddOwnedRegions",""],["mlirOperationStateAddResults","Adds a list of components to the operation state."],["mlirOperationStateAddSuccessors",""],["mlirOperationStateEnableResultTypeInference","Enables result type inference for the operation under construction. If enabled, then the caller must not have called mlirOperationStateAddResults(). Note that if enabled, the mlirOperationCreate() call is failable: it will return a null operation on inference failure and will emit diagnostics."],["mlirOperationStateGet","Constructs an operation state from a name and a location."],["mlirOperationVerify","Verify the operation and return true if it passes, false if it fails."],["mlirOperationWriteBytecode","Same as mlirOperationPrint but writing the bytecode format out."],["mlirPDLAttributeTypeGet",""],["mlirPDLOperationTypeGet",""],["mlirPDLRangeTypeGet",""],["mlirPDLRangeTypeGetElementType",""],["mlirPDLTypeTypeGet",""],["mlirPDLValueTypeGet",""],["mlirParsePassPipeline","Parse a textual MLIR pass pipeline and assign it to the provided OpPassManager. If parsing fails an error message is reported using the provided callback."],["mlirPassManagerAddOwnedPass","Add a pass and transfer ownership to the provided top-level mlirPassManager. If the pass is not a generic operation pass or a ModulePass, a new OpPassManager is implicitly nested under the provided PassManager."],["mlirPassManagerCreate","Create a new top-level PassManager with the default anchor."],["mlirPassManagerCreateOnOperation","Create a new top-level PassManager anchored on `anchorOp`."],["mlirPassManagerDestroy","Destroy the provided PassManager."],["mlirPassManagerEnableIRPrinting","Enable mlir-print-ir-after-all."],["mlirPassManagerEnableVerifier","Enable / disable verify-each."],["mlirPassManagerGetAsOpPassManager","Cast a top-level PassManager to a generic OpPassManager."],["mlirPassManagerGetNestedUnder","Nest an OpPassManager under the top-level PassManager, the nested passmanager will only run on operations matching the provided name. The returned OpPassManager will be destroyed when the parent is destroyed. To further nest more OpPassManager under the newly returned one, see `mlirOpPassManagerNest` below."],["mlirPassManagerRun","Run the provided `passManager` on the given `module`."],["mlirPrintPassPipeline","Print a textual MLIR pass pipeline by sending chunks of the string representation and forwarding `userData to `callback`. Note that the callback may be called several times with consecutive chunks of the string."],["mlirQuantizedTypeCastExpressedToStorageType","Casts from a type based on the expressed type of the given quantized type to equivalent type based on storage type of the same quantized type."],["mlirQuantizedTypeCastFromExpressedType","Casts from a type based on the expressed type of the given type to a corresponding type based on the given type. Returns a null type if the cast is not valid."],["mlirQuantizedTypeCastFromStorageType","Casts from a type based on the storage type of the given type to a corresponding type based on the given type. Returns a null type if the cast is not valid."],["mlirQuantizedTypeCastToExpressedType","Casts from a type based on a quantized type to a corresponding typed based on the expressed type. Returns a null type if the cast is not valid."],["mlirQuantizedTypeCastToStorageType","Casts from a type based on a quantized type to a corresponding typed based on the storage type. Returns a null type if the cast is not valid."],["mlirQuantizedTypeGetDefaultMaximumForInteger","Returns the maximum possible value stored by a quantized type."],["mlirQuantizedTypeGetDefaultMinimumForInteger","Returns the minimum possible value stored by a quantized type."],["mlirQuantizedTypeGetExpressedType","Gets the original type approximated by the given quantized type."],["mlirQuantizedTypeGetFlags","Gets the flags associated with the given quantized type."],["mlirQuantizedTypeGetQuantizedElementType","Returns the element type of the given quantized type as another quantized type."],["mlirQuantizedTypeGetSignedFlag","Returns the bit flag used to indicate signedness of a quantized type."],["mlirQuantizedTypeGetStorageType","Returns the underlying type used to store the values."],["mlirQuantizedTypeGetStorageTypeIntegralWidth","Returns the integral bitwidth that the storage type of the given quantized type can represent exactly."],["mlirQuantizedTypeGetStorageTypeMax","Returns the maximum value that the storage type of the given quantized type can take."],["mlirQuantizedTypeGetStorageTypeMin","Returns the minimum value that the storage type of the given quantized type can take."],["mlirQuantizedTypeIsCompatibleExpressedType","Returns `true` if the `candidate` type is compatible with the given quantized `type`."],["mlirQuantizedTypeIsSigned","Returns `true` if the given type is signed, `false` otherwise."],["mlirRankedTensorTypeGet","Creates a tensor type of a fixed rank with the given shape, element type, and optional encoding in the same context as the element type. The type is owned by the context. Tensor types without any specific encoding field should assign mlirAttributeGetNull() to this parameter."],["mlirRankedTensorTypeGetChecked","Same as “mlirRankedTensorTypeGet” but returns a nullptr wrapping MlirType on illegal arguments, emitting appropriate diagnostics."],["mlirRankedTensorTypeGetEncoding","Gets the ‘encoding’ attribute from the ranked tensor type, returning a null attribute if none."],["mlirRegionAppendOwnedBlock","Takes a block owned by the caller and appends it to the given region."],["mlirRegionCreate","Creates a new empty region and transfers ownership to the caller."],["mlirRegionDestroy","Takes a region owned by the caller and destroys it."],["mlirRegionEqual","Checks whether two region handles point to the same region. This does not perform deep comparison."],["mlirRegionGetFirstBlock","Gets the first block in the region."],["mlirRegionGetNextInOperation","Returns the region immediately following the given region in its parent operation."],["mlirRegionInsertOwnedBlock","Takes a block owned by the caller and inserts it at `pos` to the given region. This is an expensive operation that linearly scans the region, prefer insertAfter/Before instead."],["mlirRegionInsertOwnedBlockAfter","Takes a block owned by the caller and inserts it after the (non-owned) reference block in the given region. The reference block must belong to the region. If the reference block is null, prepends the block to the region."],["mlirRegionInsertOwnedBlockBefore","Takes a block owned by the caller and inserts it before the (non-owned) reference block in the given region. The reference block must belong to the region. If the reference block is null, appends the block to the region."],["mlirRegisterAllDialects","Appends all upstream dialects and extensions to the dialect registry."],["mlirRegisterAllLLVMTranslations","Register all translations to LLVM IR for dialects that can support it."],["mlirRegisterAllPasses","Register all compiler passes of MLIR."],["mlirRegisterAsyncAsyncFuncToAsyncRuntime",""],["mlirRegisterAsyncAsyncParallelFor",""],["mlirRegisterAsyncAsyncRuntimePolicyBasedRefCounting",""],["mlirRegisterAsyncAsyncRuntimeRefCounting",""],["mlirRegisterAsyncAsyncRuntimeRefCountingOpt",""],["mlirRegisterAsyncAsyncToAsyncRuntime",""],["mlirRegisterAsyncPasses",""],["mlirRegisterConversionArithToLLVMConversionPass",""],["mlirRegisterConversionConvertAMDGPUToROCDL",""],["mlirRegisterConversionConvertAffineForToGPU",""],["mlirRegisterConversionConvertAffineToStandard",""],["mlirRegisterConversionConvertArithToSPIRV",""],["mlirRegisterConversionConvertArmNeon2dToIntr",""],["mlirRegisterConversionConvertAsyncToLLVM",""],["mlirRegisterConversionConvertBufferizationToMemRef",""],["mlirRegisterConversionConvertComplexToLLVM",""],["mlirRegisterConversionConvertComplexToLibm",""],["mlirRegisterConversionConvertComplexToStandard",""],["mlirRegisterConversionConvertControlFlowToLLVM",""],["mlirRegisterConversionConvertControlFlowToSPIRV",""],["mlirRegisterConversionConvertFuncToLLVM",""],["mlirRegisterConversionConvertFuncToSPIRV",""],["mlirRegisterConversionConvertGPUToSPIRV",""],["mlirRegisterConversionConvertGpuLaunchFuncToVulkanLaunchFunc",""],["mlirRegisterConversionConvertGpuOpsToNVVMOps",""],["mlirRegisterConversionConvertGpuOpsToROCDLOps",""],["mlirRegisterConversionConvertIndexToLLVMPass",""],["mlirRegisterConversionConvertLinalgToLLVM",""],["mlirRegisterConversionConvertLinalgToStandard",""],["mlirRegisterConversionConvertMathToFuncs",""],["mlirRegisterConversionConvertMathToLLVM",""],["mlirRegisterConversionConvertMathToLibm",""],["mlirRegisterConversionConvertMathToSPIRV",""],["mlirRegisterConversionConvertMemRefToSPIRV",""],["mlirRegisterConversionConvertNVGPUToNVVM",""],["mlirRegisterConversionConvertOpenACCToLLVM",""],["mlirRegisterConversionConvertOpenACCToSCF",""],["mlirRegisterConversionConvertOpenMPToLLVM",""],["mlirRegisterConversionConvertPDLToPDLInterp",""],["mlirRegisterConversionConvertParallelLoopToGpu",""],["mlirRegisterConversionConvertSCFToOpenMP",""],["mlirRegisterConversionConvertSPIRVToLLVM",""],["mlirRegisterConversionConvertShapeConstraints",""],["mlirRegisterConversionConvertShapeToStandard",""],["mlirRegisterConversionConvertTensorToLinalg",""],["mlirRegisterConversionConvertTensorToSPIRV",""],["mlirRegisterConversionConvertVectorToGPU",""],["mlirRegisterConversionConvertVectorToLLVM",""],["mlirRegisterConversionConvertVectorToSCF",""],["mlirRegisterConversionConvertVectorToSPIRV",""],["mlirRegisterConversionConvertVulkanLaunchFuncToVulkanCalls",""],["mlirRegisterConversionGpuToLLVMConversionPass",""],["mlirRegisterConversionLowerHostCodeToLLVM",""],["mlirRegisterConversionMapMemRefStorageClass",""],["mlirRegisterConversionMemRefToLLVMConversionPass",""],["mlirRegisterConversionPasses",""],["mlirRegisterConversionReconcileUnrealizedCasts",""],["mlirRegisterConversionSCFToControlFlow",""],["mlirRegisterConversionSCFToSPIRV",""],["mlirRegisterConversionTosaToArith",""],["mlirRegisterConversionTosaToLinalg",""],["mlirRegisterConversionTosaToLinalgNamed",""],["mlirRegisterConversionTosaToSCF",""],["mlirRegisterConversionTosaToTensor",""],["mlirRegisterGPUGPULowerMemorySpaceAttributesPass",""],["mlirRegisterGPUGpuAsyncRegionPass",""],["mlirRegisterGPUGpuKernelOutlining",""],["mlirRegisterGPUGpuLaunchSinkIndexComputations",""],["mlirRegisterGPUGpuMapParallelLoopsPass",""],["mlirRegisterGPUPasses",""],["mlirRegisterLinalgConvertElementwiseToLinalg",""],["mlirRegisterLinalgLinalgBufferize",""],["mlirRegisterLinalgLinalgDetensorize",""],["mlirRegisterLinalgLinalgElementwiseOpFusion",""],["mlirRegisterLinalgLinalgFoldUnitExtentDims",""],["mlirRegisterLinalgLinalgGeneralization",""],["mlirRegisterLinalgLinalgInlineScalarOperands",""],["mlirRegisterLinalgLinalgLowerToAffineLoops",""],["mlirRegisterLinalgLinalgLowerToLoops",""],["mlirRegisterLinalgLinalgLowerToParallelLoops",""],["mlirRegisterLinalgLinalgNamedOpConversion",""],["mlirRegisterLinalgPasses",""],["mlirRegisterSparseTensorPasses",""],["mlirRegisterSparseTensorPostSparsificationRewrite",""],["mlirRegisterSparseTensorPreSparsificationRewrite",""],["mlirRegisterSparseTensorSparseBufferRewrite",""],["mlirRegisterSparseTensorSparseTensorCodegen",""],["mlirRegisterSparseTensorSparseTensorConversionPass",""],["mlirRegisterSparseTensorSparseVectorization",""],["mlirRegisterSparseTensorSparsificationPass",""],["mlirRegisterSparseTensorStorageSpecifierToLLVM",""],["mlirRegisterTransformsCSE",""],["mlirRegisterTransformsCanonicalizer",""],["mlirRegisterTransformsControlFlowSink",""],["mlirRegisterTransformsGenerateRuntimeVerification",""],["mlirRegisterTransformsInliner",""],["mlirRegisterTransformsLocationSnapshot",""],["mlirRegisterTransformsLoopInvariantCodeMotion",""],["mlirRegisterTransformsPasses",""],["mlirRegisterTransformsPrintOpStats",""],["mlirRegisterTransformsSCCP",""],["mlirRegisterTransformsStripDebugInfo",""],["mlirRegisterTransformsSymbolDCE",""],["mlirRegisterTransformsSymbolPrivatize",""],["mlirRegisterTransformsTopologicalSort",""],["mlirRegisterTransformsViewOpGraph",""],["mlirShapedTypeGetDimSize","Returns the dim-th dimension of the given ranked shaped type."],["mlirShapedTypeGetDynamicSize","Returns the value indicating a dynamic size in a shaped type. Prefer mlirShapedTypeIsDynamicSize to direct comparisons with this value."],["mlirShapedTypeGetDynamicStrideOrOffset","Returns the value indicating a dynamic stride or offset in a shaped type. Prefer mlirShapedTypeGetDynamicStrideOrOffset to direct comparisons with this value."],["mlirShapedTypeGetElementType","Returns the element type of the shaped type."],["mlirShapedTypeGetRank","Returns the rank of the given ranked shaped type."],["mlirShapedTypeHasRank","Checks whether the given shaped type is ranked."],["mlirShapedTypeHasStaticShape","Checks whether the given shaped type has a static shape."],["mlirShapedTypeIsDynamicDim","Checks wither the dim-th dimension of the given shaped type is dynamic."],["mlirShapedTypeIsDynamicSize","Checks whether the given value is used as a placeholder for dynamic sizes in shaped types."],["mlirShapedTypeIsDynamicStrideOrOffset","Checks whether the given value is used as a placeholder for dynamic strides and offsets in shaped types."],["mlirSparseElementsAttrGetIndices","Returns the dense elements attribute containing 64-bit integer indices of non-null elements in the given sparse elements attribute."],["mlirSparseElementsAttrGetValues","Returns the dense elements attribute containing the non-null elements in the given sparse elements attribute."],["mlirSparseElementsAttribute","Creates a sparse elements attribute of the given shape from a list of indices and a list of associated values. Both lists are expected to be dense elements attributes with the same number of elements. The list of indices is expected to contain 64-bit integers. The attribute is created in the same context as the type."],["mlirSparseTensorEncodingAttrGet","Creates a sparse_tensor.encoding attribute with the given parameters."],["mlirSparseTensorEncodingAttrGetDimLevelType","Returns a specified dim level type in a sparse_tensor.encoding attribute."],["mlirSparseTensorEncodingAttrGetDimOrdering","Returns the dimension ordering in a sparse_tensor.encoding attribute."],["mlirSparseTensorEncodingAttrGetHigherOrdering","Returns the higher ordering in a sparse_tensor.encoding attribute."],["mlirSparseTensorEncodingAttrGetIndexBitWidth","Returns the index bit width in a sparse_tensor.encoding attribute."],["mlirSparseTensorEncodingAttrGetPointerBitWidth","Returns the pointer bit width in a sparse_tensor.encoding attribute."],["mlirSparseTensorEncodingGetNumDimLevelTypes","Returns the number of dim level types in a sparse_tensor.encoding attribute."],["mlirStridedLayoutAttrGet",""],["mlirStridedLayoutAttrGetNumStrides",""],["mlirStridedLayoutAttrGetOffset",""],["mlirStridedLayoutAttrGetStride",""],["mlirStringAttrGet","Creates a string attribute in the given context containing the given string."],["mlirStringAttrGetValue","Returns the attribute values as a string reference. The data remains live as long as the context in which the attribute lives."],["mlirStringAttrTypedGet","Creates a string attribute in the given context containing the given string. Additionally, the attribute has the given type."],["mlirStringRefCreateFromCString","Constructs a string reference from a null-terminated C string. Prefer mlirStringRefCreate if the length of the string is known."],["mlirStringRefEqual","Returns true if two string references are equal, false otherwise."],["mlirSymbolRefAttrGet","Creates a symbol reference attribute in the given context referencing a symbol identified by the given string inside a list of nested references. Each of the references in the list must not be nested."],["mlirSymbolRefAttrGetLeafReference","Returns the string reference to the leaf referenced symbol. The data remains live as long as the context in which the attribute lives."],["mlirSymbolRefAttrGetNestedReference","Returns pos-th reference nested in the given symbol reference attribute."],["mlirSymbolRefAttrGetNumNestedReferences","Returns the number of references nested in the given symbol reference attribute."],["mlirSymbolRefAttrGetRootReference","Returns the string reference to the root referenced symbol. The data remains live as long as the context in which the attribute lives."],["mlirSymbolTableCreate","Creates a symbol table for the given operation. If the operation does not have the SymbolTable trait, returns a null symbol table."],["mlirSymbolTableDestroy","Destroys the symbol table created with mlirSymbolTableCreate. This does not affect the operations in the table."],["mlirSymbolTableErase","Removes the given operation from the symbol table and erases it."],["mlirSymbolTableGetSymbolAttributeName","Returns the name of the attribute used to store symbol names compatible with symbol tables."],["mlirSymbolTableGetVisibilityAttributeName","Returns the name of the attribute used to store symbol visibility."],["mlirSymbolTableInsert","Inserts the given operation into the given symbol table. The operation must have the symbol trait. If the symbol table already has a symbol with the same name, renames the symbol being inserted to ensure name uniqueness. Note that this does not move the operation itself into the block of the symbol table operation, this should be done separately. Returns the name of the symbol after insertion."],["mlirSymbolTableLookup","Looks up a symbol with the given name in the given symbol table and returns the operation that corresponds to the symbol. If the symbol cannot be found, returns a null operation."],["mlirSymbolTableReplaceAllSymbolUses","Attempt to replace all uses that are nested within the given operation of the given symbol ‘oldSymbol’ with the provided ‘newSymbol’. This does not traverse into nested symbol tables. Will fail atomically if there are any unknown operations that may be potential symbol tables."],["mlirSymbolTableWalkSymbolTables","Walks all symbol table operations nested within, and including, `op`. For each symbol table operation, the provided callback is invoked with the op and a boolean signifying if the symbols within that symbol table can be treated as if all uses within the IR are visible to the caller. `allSymUsesVisible` identifies whether all of the symbol uses of symbols within `op` are visible."],["mlirTransformAnyOpTypeGet",""],["mlirTransformOperationTypeGet",""],["mlirTransformOperationTypeGetOperationName",""],["mlirTupleTypeGet","Creates a tuple type that consists of the given list of elemental types. The type is owned by the context."],["mlirTupleTypeGetNumTypes","Returns the number of types contained in a tuple."],["mlirTupleTypeGetType","Returns the pos-th type in the tuple type."],["mlirTypeAttrGet","Creates a type attribute wrapping the given type in the same context as the type."],["mlirTypeAttrGetValue","Returns the type stored in the given type attribute."],["mlirTypeDump","Prints the type to the standard error stream."],["mlirTypeEqual","Checks if two types are equal."],["mlirTypeGetContext","Gets the context that a type was created with."],["mlirTypeGetTypeID","Gets the type ID of the type."],["mlirTypeIDAllocatorAllocateTypeID","Allocates a type id that is valid for the lifetime of the allocator"],["mlirTypeIDAllocatorCreate","Creates a type id allocator for dynamic type id creation"],["mlirTypeIDAllocatorDestroy","Deallocates the allocator and all allocated type ids"],["mlirTypeIDCreate","`ptr` must be 8 byte aligned and unique to a type valid for the duration of the returned type id’s usage"],["mlirTypeIDEqual","Checks if two type ids are equal."],["mlirTypeIDHashValue","Returns the hash value of the type id."],["mlirTypeIsAAnyQuantizedType","Returns `true` if the given type is an AnyQuantizedType."],["mlirTypeIsABF16","Checks whether the given type is a bf16 type."],["mlirTypeIsACalibratedQuantizedType","Returns `true` if the given type is a CalibratedQuantizedType."],["mlirTypeIsAComplex","Checks whether the given type is a Complex type."],["mlirTypeIsAF16","Checks whether the given type is an f16 type."],["mlirTypeIsAF32","Checks whether the given type is an f32 type."],["mlirTypeIsAF64","Checks whether the given type is an f64 type."],["mlirTypeIsAFloat8E4M3FN","Checks whether the given type is an f8E4M3FN type."],["mlirTypeIsAFloat8E5M2","Checks whether the given type is an f8E5M2 type."],["mlirTypeIsAFunction","Checks whether the given type is a function type."],["mlirTypeIsAIndex","Checks whether the given type is an index type."],["mlirTypeIsAInteger","Checks whether the given type is an integer type."],["mlirTypeIsAMemRef","Checks whether the given type is a MemRef type."],["mlirTypeIsANone","Checks whether the given type is a None type."],["mlirTypeIsAOpaque","Checks whether the given type is an opaque type."],["mlirTypeIsAPDLAttributeType",""],["mlirTypeIsAPDLOperationType",""],["mlirTypeIsAPDLRangeType",""],["mlirTypeIsAPDLType",""],["mlirTypeIsAPDLTypeType",""],["mlirTypeIsAPDLValueType",""],["mlirTypeIsAQuantizedType","Returns `true` if the given type is a quantization dialect type."],["mlirTypeIsARankedTensor","Checks whether the given type is a ranked tensor type."],["mlirTypeIsAShaped","Checks whether the given type is a Shaped type."],["mlirTypeIsATensor","Checks whether the given type is a Tensor type."],["mlirTypeIsATransformAnyOpType",""],["mlirTypeIsATransformOperationType",""],["mlirTypeIsATuple","Checks whether the given type is a tuple type."],["mlirTypeIsAUniformQuantizedPerAxisType","Returns `true` if the given type is a UniformQuantizedPerAxisType."],["mlirTypeIsAUniformQuantizedType","Returns `true` if the given type is a UniformQuantizedType."],["mlirTypeIsAUnrankedMemRef","Checks whether the given type is an UnrankedMemRef type."],["mlirTypeIsAUnrankedTensor","Checks whether the given type is an unranked tensor type."],["mlirTypeIsAVector","Checks whether the given type is a Vector type."],["mlirTypeParseGet","Parses a type. The type is owned by the context."],["mlirTypePrint","Prints a location by sending chunks of the string representation and forwarding `userData to `callback`. Note that the callback may be called several times with consecutive chunks of the string."],["mlirUniformQuantizedPerAxisTypeGet","Creates an instance of UniformQuantizedPerAxisType with the given parameters in the same context as `storageType` and returns it. `scales` and `zeroPoints` point to `nDims` number of elements. The instance is owned by the context."],["mlirUniformQuantizedPerAxisTypeGetNumDims","Returns the number of axes in the given quantized per-axis type."],["mlirUniformQuantizedPerAxisTypeGetQuantizedDimension","Returns the index of the quantized dimension in the given quantized per-axis type."],["mlirUniformQuantizedPerAxisTypeGetScale","Returns `pos`-th scale of the given quantized per-axis type."],["mlirUniformQuantizedPerAxisTypeGetZeroPoint","Returns `pos`-th zero point of the given quantized per-axis type."],["mlirUniformQuantizedPerAxisTypeIsFixedPoint","Returns `true` if the given uniform quantized per-axis type is fixed-point."],["mlirUniformQuantizedTypeGet","Creates an instance of UniformQuantizedType with the given parameters in the same context as `storageType` and returns it. The instance is owned by the context."],["mlirUniformQuantizedTypeGetScale","Returns the scale of the given uniform quantized type."],["mlirUniformQuantizedTypeGetZeroPoint","Returns the zero point of the given uniform quantized type."],["mlirUniformQuantizedTypeIsFixedPoint","Returns `true` if the given uniform quantized type is fixed-point."],["mlirUnitAttrGet","Creates a unit attribute in the given context."],["mlirUnmanagedDenseBoolResourceElementsAttrGet",""],["mlirUnmanagedDenseDoubleResourceElementsAttrGet",""],["mlirUnmanagedDenseFloatResourceElementsAttrGet",""],["mlirUnmanagedDenseInt16ResourceElementsAttrGet",""],["mlirUnmanagedDenseInt32ResourceElementsAttrGet",""],["mlirUnmanagedDenseInt64ResourceElementsAttrGet",""],["mlirUnmanagedDenseInt8ResourceElementsAttrGet",""],["mlirUnmanagedDenseUInt16ResourceElementsAttrGet",""],["mlirUnmanagedDenseUInt32ResourceElementsAttrGet",""],["mlirUnmanagedDenseUInt64ResourceElementsAttrGet",""],["mlirUnmanagedDenseUInt8ResourceElementsAttrGet",""],["mlirUnrankedMemRefTypeGet","Creates an Unranked MemRef type with the given element type and in the given memory space. The type is owned by the context of element type."],["mlirUnrankedMemRefTypeGetChecked","Same as “mlirUnrankedMemRefTypeGet” but returns a nullptr wrapping MlirType on illegal arguments, emitting appropriate diagnostics."],["mlirUnrankedMemrefGetMemorySpace","Returns the memory spcae of the given Unranked MemRef type."],["mlirUnrankedTensorTypeGet","Creates an unranked tensor type with the given element type in the same context as the element type. The type is owned by the context."],["mlirUnrankedTensorTypeGetChecked","Same as “mlirUnrankedTensorTypeGet” but returns a nullptr wrapping MlirType on illegal arguments, emitting appropriate diagnostics."],["mlirValueDump","Prints the value to the standard error stream."],["mlirValueEqual","Returns 1 if two values are equal, 0 otherwise."],["mlirValueGetFirstUse","Returns an op operand representing the first use of the value, or a null op operand if there are no uses."],["mlirValueGetType","Returns the type of the value."],["mlirValueIsABlockArgument","Returns 1 if the value is a block argument, 0 otherwise."],["mlirValueIsAOpResult","Returns 1 if the value is an operation result, 0 otherwise."],["mlirValuePrint","Prints a value by sending chunks of the string representation and forwarding `userData to `callback`. Note that the callback may be called several times with consecutive chunks of the string."],["mlirVectorTypeGet","Creates a vector type of the shape identified by its rank and dimensions, with the given element type in the same context as the element type. The type is owned by the context."],["mlirVectorTypeGetChecked","Same as “mlirVectorTypeGet” but returns a nullptr wrapping MlirType on illegal arguments, emitting appropriate diagnostics."]],"struct":[["MlirAffineExpr",""],["MlirAffineMap",""],["MlirAttribute",""],["MlirBlock",""],["MlirContext",""],["MlirDiagnostic","An opaque reference to a diagnostic, always owned by the diagnostics engine (context). Must not be stored outside of the diagnostic handler."],["MlirDialect",""],["MlirDialectHandle",""],["MlirDialectRegistry",""],["MlirExecutionEngine",""],["MlirExternalPass",""],["MlirExternalPassCallbacks","Structure of external `MlirPass` callbacks. All callbacks are required to be set unless otherwise specified."],["MlirIdentifier",""],["MlirIntegerSet",""],["MlirLocation",""],["MlirLogicalResult","A logical result value, essentially a boolean with named states. LLVM convention for using boolean values to designate success or failure of an operation is a moving target, so MLIR opted for an explicit class. Instances of MlirLogicalResult must only be inspected using the associated functions."],["MlirModule",""],["MlirNamedAttribute","Named MLIR attribute."],["MlirOpOperand",""],["MlirOpPassManager",""],["MlirOpPrintingFlags",""],["MlirOperation",""],["MlirOperationState","An auxiliary class for constructing operations."],["MlirPass",""],["MlirPassManager",""],["MlirRegion",""],["MlirStringRef","A pointer to a sized fragment of a string, not necessarily null-terminated. Does not own the underlying string. This is equivalent to llvm::StringRef."],["MlirSymbolTable",""],["MlirType",""],["MlirTypeID",""],["MlirTypeIDAllocator",""],["MlirValue",""],["__fsid_t",""],["max_align_t",""]],"type":[["MlirDiagnosticHandler","Diagnostic handler type. Accepts a reference to a diagnostic, which is only guaranteed to be live during the call. The handler is passed the `userData` that was provided when the handler was attached to a context. If the handler processed the diagnostic completely, it is expected to return success. Otherwise, it is expected to return failure to indicate that other handlers should attempt to process the diagnostic."],["MlirDiagnosticHandlerID","Opaque identifier of a diagnostic handler, useful to detach a handler."],["MlirDiagnosticSeverity","Severity of a diagnostic."],["MlirSparseTensorDimLevelType","Dimension level types (and properties) that define sparse tensors. See the documentation in SparseTensorAttrDefs.td for their meaning."],["MlirStringCallback","A callback for returning string references."],["MlirTypesCallback","These callbacks are used to return multiple types from functions while transferring ownership to the caller. The first argument is the number of consecutive elements pointed to by the second argument. The third argument is an opaque pointer forwarded to the callback by the caller."],["__blkcnt64_t",""],["__blkcnt_t",""],["__blksize_t",""],["__caddr_t",""],["__clock_t",""],["__clockid_t",""],["__daddr_t",""],["__dev_t",""],["__fsblkcnt64_t",""],["__fsblkcnt_t",""],["__fsfilcnt64_t",""],["__fsfilcnt_t",""],["__fsword_t",""],["__gid_t",""],["__id_t",""],["__ino64_t",""],["__ino_t",""],["__int16_t",""],["__int32_t",""],["__int64_t",""],["__int8_t",""],["__int_least16_t",""],["__int_least32_t",""],["__int_least64_t",""],["__int_least8_t",""],["__intmax_t",""],["__intptr_t",""],["__key_t",""],["__loff_t",""],["__mode_t",""],["__nlink_t",""],["__off64_t",""],["__off_t",""],["__pid_t",""],["__quad_t",""],["__rlim64_t",""],["__rlim_t",""],["__sig_atomic_t",""],["__socklen_t",""],["__ssize_t",""],["__suseconds64_t",""],["__suseconds_t",""],["__syscall_slong_t",""],["__syscall_ulong_t",""],["__time_t",""],["__timer_t",""],["__u_char",""],["__u_int",""],["__u_long",""],["__u_quad_t",""],["__u_short",""],["__uid_t",""],["__uint16_t",""],["__uint32_t",""],["__uint64_t",""],["__uint8_t",""],["__uint_least16_t",""],["__uint_least32_t",""],["__uint_least64_t",""],["__uint_least8_t",""],["__uintmax_t",""],["__useconds_t",""],["int_fast16_t",""],["int_fast32_t",""],["int_fast64_t",""],["int_fast8_t",""],["int_least16_t",""],["int_least32_t",""],["int_least64_t",""],["int_least8_t",""],["intmax_t",""],["uint_fast16_t",""],["uint_fast32_t",""],["uint_fast64_t",""],["uint_fast8_t",""],["uint_least16_t",""],["uint_least32_t",""],["uint_least64_t",""],["uint_least8_t",""],["uintmax_t",""],["wchar_t",""]]};